import java_cup.runtime.*;
import java.io.*;
import java.util.ArrayList;

import SymbolTable.*;

parser code {:

	public int errNo = 0;
	public int warnNo = 0;
	public int scope = 0;

	SymbolTable symbolTable;

	public static void main( String[] args )
	{
		try
		{
			FileReader file = new FileReader( args[0] );
			Scanner scanner = new MPLexer( file );
			MPParser parser = new MPParser( scanner );
			parser.parse();
			parser.checkWarnings();
			System.out.println( "Analiza zavrsena." );
			if ( parser.errNo == 0 )
				System.out.println( "U kodu nema gresaka." );
			else
				System.out.println( "Broj gresaka: " + parser.errNo );
			if( parser.warnNo == 0 )
				System.out.println( "U kodu nema upozorenja." );
			else
				System.out.println( "Broj upozorenja: " + parser.warnNo );
		}
		catch( Exception e )
		{
			System.out.println(e);
		}
	}
	
	public void checkWarnings()
	{
		SymbolNode current = symbolTable.getVariables();
		while(current != null)
		{
			Variable var = (Variable)current;
			if(var.last_def == -1 && var.last_use == -1)
			{
				System.out.println("Upozorenje: Promenljiva "
					+ var.name +
					" je deklarisana, ali se ne koristi.");
				warnNo++;
			}
			else if(var.last_def > var.last_use)
			{
				System.out.println("Upozorenje: Vrednost dodeljena promenljivoj "
					+ var.name + " u liniji " + var.last_def +
					" se nigde ne koristi.");
				warnNo++;
			}
			current = current.next;
		}
	}
	
	public void syntax_error(Symbol cur_token)
	{
		
	}

	public void report_error(String message, Object info)
	{
		System.out.print( message );
	}

	public int getLine()
	{
		return (( MPLexer) getScanner()).getLine();
	}
:};

init with
{:
	symbolTable = new SymbolTable();
:};

// Terminali
terminal PROGRAM, DOT,INTEGER,BOOLEAN,REAL,CHAR, BEGIN, END, COLON, SEMICOLON, COMMA;
terminal ASSIGN, SELECT, CASE, ARROW, OR, AND, LT, LE, EQ, NE, GT, GE;
terminal LEFTPAR, RIGHTPAR;
terminal Integer INTCONST;
terminal String ID;
terminal Double REALCONST;
terminal Character CHARCONST;
terminal Boolean BOOLCONST;


// Neterminali
non terminal Program, Block, Variables, Declaration, StatementList, Statement, SelectStatement, CaseList, Case;
non terminal RelOp;
non terminal Type Tip, Expression, AndExpression, RelExpression, Term;
non terminal ArrayList NameList;
non terminal Constant Konstanta;


start with Program;

// Gramatika
Program ::= PROGRAM Block DOT 
{:
    System.out.println("Smena 1");
:}
|PROGRAM Block error
{:
	System.out.println( "Nedostaje '.' na kraju programa" );
    parser.errNo++;
:}
|PROGRAM error
{:
	System.out.println( "Nedostaje blok programa" );
    parser.errNo++;
:}
|error
{:
	System.out.println( "Nedostaje kljucna rec program" );
    parser.errNo++;
:};

Block ::= BEGIN Variables StatementList END
{:
    System.out.println("Smena 2");
parser.scope++;
	
:}
| BEGIN Variables StatementList error
{:
	System.out.println( "Nedostaje kljucna rec end" );
    parser.errNo++;
:}
;

Variables ::= Variables Declaration
{:
    System.out.println("Smena 3");
:}
|
{:
	System.out.println("Smena 4");
:};

Declaration ::= NameList:niz COLON Tip:t SEMICOLON
{:
    System.out.println("Smena 5");
	for(int i = 0; i < niz.size(); i++)
    {
    	String ime = (String) niz.get(i);
        if(!parser.symbolTable.addVar(ime, t,parser.scope))
		{
        	System.out.println("Greska u liniji "+parser.getLine()+": "+"Promenljiva "+ime+" je vec deklarisana.");
            parser.errNo++;
		}
	}

:}
|NameList:niz COLON Tip:t error
{:
	System.out.println( "Nedostaje ';'" );
	for(int i = 0; i < niz.size(); i++)
    {
    	String ime = (String) niz.get(i);
        if(!parser.symbolTable.addVar(ime, t,parser.scope))
		{
        	System.out.println("Greska u liniji "+parser.getLine()+": "+"Promenljiva "+ime+" je vec deklarisana.");
            parser.errNo++;
		}
	}
    parser.errNo++;
:}
|NameList COLON error
{:
	System.out.println( "Nedostaje Type Promenljive" );
    parser.errNo++;
:}
|NameList error
{:
	System.out.println( "Nedostaje ':'" );
    parser.errNo++;
:}
;

NameList ::= NameList:niz COMMA ID:ime
{:
    System.out.println("Smena 6");
	RESULT = niz;
	RESULT.add( ime );
:}
| ID:ime
{:
    System.out.println("Smena 7");
	RESULT = new ArrayList();
	RESULT.add( ime );
:}
|NameList COMMA error
{:
	System.out.println( "Nedostaje identifikator" );
    parser.errNo++;
:}
|NameList error
{:
	System.out.println( "Nedostaje ','" );
    parser.errNo++;
:};

Tip ::= INTEGER
{:
    System.out.println("Smena 8");
	RESULT = parser.symbolTable.getType("integer");
:}
| CHAR
{:
    System.out.println("Smena 9");
	RESULT = parser.symbolTable.getType("char");
:}
| REAL
{:
    System.out.println("Smena 10");
	RESULT = parser.symbolTable.getType("real");
:}
| BOOLEAN
{:
    System.out.println("Smena 11");
	RESULT = parser.symbolTable.getType("boolean");
:};

StatementList ::= Statement
{:
    System.out.println("Smena 12");
:}
| StatementList Statement
{:
    System.out.println("Smena 13");
:};

Statement ::= SelectStatement
{:
    System.out.println("Smena 14");
	
:}
| ID:ime ASSIGN Expression:i SEMICOLON
{:
    System.out.println("Smena 15");
	
	Variable var = parser.symbolTable.getVar(ime,parser.scope);
	if(var == null)
	{
		System.out.println("Greska u liniji "+parser.getLine()+ ": " +"promenljiva "+ime+" nije deklarisana.");
		parser.errNo++;
	}
	else
	{
		var.last_def = parser.getLine();
		if(var.type.tkind == 4 && var.type.tkind > i.tkind)
															//Broj u Type.java za bool je 4, sto znaci bool moze samo bool
		{	
			System.out.println("Greska u liniji "+parser.getLine()+": "+"Neslaganje tipa u naredbi dodele.");
			parser.errNo++;			
		}
		else if(var.type.tkind != i.tkind && var.type.tkind > i.tkind )
																	//Ukoliko nisu istog tipa i levi je veci tip, vrsiti konverziju desnog tj. nizeg u visi
		{
			System.out.println("Izvrsena je konverzacija nizeg u visi tip");
			//var.type.tkind=	i.tkind;
		} 
	}
:}
| Block
{:
    System.out.println("Smena 16");
:}
| ID ASSIGN Expression error
{:
   System.out.println( "Nedostaje ';'" );
    parser.errNo++;
:}
| ID ASSIGN error
{:
   System.out.println( "Nedostaje izraz" );
    parser.errNo++;
:}
;

SelectStatement ::= SELECT BEGIN CaseList END 
{:
    System.out.println("Smena 17");
	parser.scope--;
:}
| SELECT  BEGIN CaseList error 
{:
   System.out.println( "Nedostaje kljucna rec end");
    parser.errNo++;
:}
| SELECT  BEGIN  error 
{:
   System.out.println( "Nedostaje CaseList");
    parser.errNo++;
:}
| SELECT error 
{:
   System.out.println( "Nedostaje kljucna rec begin");
    parser.errNo++;
:};

CaseList ::= CaseList Case
{:
    System.out.println("Smena 18");
:}
| Case
{:
    System.out.println("Smena 19");
:};

Case ::= CASE Expression:e ARROW Statement
{:
    System.out.println("Smena 20");
	System.out.println("ekind =" +e.kind + " type.bool= " +Type.BOOLEAN +e.name);
	if(e.name != "boolean")
	{
		System.out.println("Greska u liniji " +parser.getLine() + ": " +"Izraz mora biti tipa boolean a trenutni izraz je tipa: " + e.name);
		parser.errNo++;
	}
	RESULT = parser.symbolTable.getType("boolean");
:}
| CASE Expression ARROW error 
{:
   System.out.println( "Nedostaje Statement");
    parser.errNo++;
:}
| CASE Expression error 
{:
   System.out.println( "Nedostaje '=>'");
    parser.errNo++;
:}
| CASE  error 
{:
   System.out.println( "Nedostaje expression");
    parser.errNo++;
:};


Expression ::= Expression:e1 OR AndExpression:e2
{:
    System.out.println("Smena 21");
	if(e1.tkind != Type.BOOLEAN || e2.tkind != Type.BOOLEAN)
	{
		System.out.println("Greska u liniji "+parser.getLine()+": "+"Operandi u logickom izrazu mogu biti samo tipa boolean.");
		parser.errNo++;
	}
	RESULT = parser.symbolTable.getType("boolean");    
:}
| AndExpression:e
{:
    System.out.println("Smena 22");
	RESULT=e.type;
:}
| Expression OR error 
{:
   System.out.println( "Nedostaje AndExpression");
    parser.errNo++;
:};

AndExpression ::= AndExpression:e1 AND RelExpression:e2
{:
    System.out.println("Smena 23");
	if(e1.tkind != Type.BOOLEAN || e2.tkind != Type.BOOLEAN)
	{
		System.out.println("Greska u liniji "+parser.getLine()+": "+"Operandi u logickom izrazu mogu biti samo tipa boolean.");
		parser.errNo++;
	}
	RESULT = parser.symbolTable.getType("boolean"); 
:}
| RelExpression:e
{:
    System.out.println("Smena 24");
	RESULT=e.type;
:}
| AndExpression AND error 
{:
   System.out.println( "Nedostaje RelExpression");
    parser.errNo++;
:}
;

RelExpression ::= Term:r1 RelOp Term:r2
{:
    System.out.println("Smena 25");
	if(r1.tkind == Type.BOOLEAN || r2.tkind == Type.BOOLEAN)
	{
		System.out.println("Greska u liniji "+parser.getLine()+": "+"Operandi mogu biti samo numerickog tipa");
		parser.errNo++;
	}
	RESULT = parser.symbolTable.getType("boolean"); 
:}
| Term:i
{:
    RESULT = i;
:}
| Term RelOp error 
{:
   System.out.println( "Nedostaje term");
    parser.errNo++;
:}
;

RelOp ::= LT
{:
    System.out.println("Smena 27");
:}
| LE
{:
    System.out.println("Smena 28");
:}
| EQ
{:
    System.out.println("Smena 29");
:}
| NE
{:
    System.out.println("Smena 30");
:}
| GT
{:
    System.out.println("Smena 31");
:}
| GE
{:
    System.out.println("Smena 32");
:};

Term  ::= ID:ime
{:
	Variable var = parser.symbolTable.getVar( ime,parser.scope);
    if ( var == null )
    {
    	System.out.println( "Greska u liniji " + parser.getLine() +  ": promenljiva " + ime + " nije deklarisana.");
    	RESULT = parser.symbolTable.getType( "unknown" );
        parser.errNo++;
    }
    else 
    {
    	RESULT = var.type;
        if ( var.last_def == -1 )
        {
        	System.out.println( "Greska u liniji " + parser.getLine() + ": promenljiva " + ime + " nije inicijalizovana.");
            parser.errNo++;
        }
     	var.last_use = parser.getLine();
	}
:}
| Konstanta:k
{:
	RESULT = k.type;
:}
| LEFTPAR Expression:i RIGHTPAR
{:
	RESULT = i;
:}
| LEFTPAR Expression error
{:
     System.out.println( "Nedostaje )");
    parser.errNo++;
:}
| LEFTPAR  error
{:
     System.out.println( "Nedostaje Expression");
    parser.errNo++;
:};
Konstanta ::= INTCONST:c
{:
	RESULT = new Constant(parser.symbolTable.getType( "integer" ),c);
:}
| CHARCONST:c
{:
	RESULT = new Constant(parser.symbolTable.getType( "char" ),c );
:}
| BOOLCONST:c
{:
	RESULT = new Constant(parser.symbolTable.getType( "boolean" ),c );
:}
| REALCONST:c
{:
	RESULT = new Constant(parser.symbolTable.getType( "real" ),c );
:};