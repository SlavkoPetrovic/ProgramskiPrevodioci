
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Mon Dec 27 00:11:19 CET 2021
//----------------------------------------------------

import java_cup.runtime.*;
import java.io.*;
import java.util.ArrayList;
import SymbolTable.*;

/** CUP v0.10k generated parser.
  * @version Mon Dec 27 00:11:19 CET 2021
  */
public class MPParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public MPParser() {super();}

  /** Constructor which sets the default scanner. */
  public MPParser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\076\000\002\002\004\000\002\003\005\000\002\003" +
    "\005\000\002\003\004\000\002\003\003\000\002\004\006" +
    "\000\002\004\006\000\002\005\004\000\002\005\002\000" +
    "\002\006\006\000\002\006\006\000\002\006\005\000\002" +
    "\006\004\000\002\022\005\000\002\022\003\000\002\022" +
    "\005\000\002\022\004\000\002\015\003\000\002\015\003" +
    "\000\002\015\003\000\002\015\003\000\002\007\003\000" +
    "\002\007\004\000\002\010\003\000\002\010\006\000\002" +
    "\010\003\000\002\010\006\000\002\010\005\000\002\011" +
    "\006\000\002\011\006\000\002\011\005\000\002\011\004" +
    "\000\002\012\004\000\002\012\003\000\002\013\006\000" +
    "\002\013\006\000\002\013\005\000\002\013\004\000\002" +
    "\016\005\000\002\016\003\000\002\016\005\000\002\017" +
    "\005\000\002\017\003\000\002\017\005\000\002\020\005" +
    "\000\002\020\003\000\002\020\005\000\002\014\003\000" +
    "\002\014\003\000\002\014\003\000\002\014\003\000\002" +
    "\014\003\000\002\014\003\000\002\021\003\000\002\021" +
    "\003\000\002\021\005\000\002\021\005\000\002\021\004" +
    "\000\002\023\003\000\002\023\003\000\002\023\003\000" +
    "\002\023\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\125\000\006\003\005\004\006\001\002\000\004\002" +
    "\127\001\002\000\004\002\ufffd\001\002\000\006\003\007" +
    "\012\011\001\002\000\004\002\ufffe\001\002\000\006\003" +
    "\125\005\126\001\002\000\010\012\ufff9\020\ufff9\036\ufff9" +
    "\001\002\000\010\012\011\020\022\036\021\001\002\000" +
    "\010\003\111\014\112\016\110\001\002\000\016\003\uffe8" +
    "\012\uffe8\013\uffe8\020\uffe8\021\uffe8\036\uffe8\001\002\000" +
    "\014\003\105\012\011\013\107\020\022\036\075\001\002" +
    "\000\016\003\uffea\012\uffea\013\uffea\020\uffea\021\uffea\036" +
    "\uffea\001\002\000\010\012\ufffa\020\ufffa\036\ufffa\001\002" +
    "\000\014\003\uffec\012\uffec\013\uffec\020\uffec\036\uffec\001" +
    "\002\000\012\003\ufff3\014\ufff3\016\ufff3\017\100\001\002" +
    "\000\006\003\023\012\024\001\002\000\016\003\uffe2\012" +
    "\uffe2\013\uffe2\020\uffe2\021\uffe2\036\uffe2\001\002\000\006" +
    "\003\026\021\027\001\002\000\010\003\uffe0\013\uffe0\021" +
    "\uffe0\001\002\000\016\003\uffe3\012\uffe3\013\uffe3\020\uffe3" +
    "\021\uffe3\036\uffe3\001\002\000\020\003\045\033\042\035" +
    "\047\036\044\037\036\040\037\041\041\001\002\000\010" +
    "\003\032\013\033\021\027\001\002\000\010\003\uffe1\013" +
    "\uffe1\021\uffe1\001\002\000\016\003\uffe4\012\uffe4\013\uffe4" +
    "\020\uffe4\021\uffe4\036\uffe4\001\002\000\016\003\uffe5\012" +
    "\uffe5\013\uffe5\020\uffe5\021\uffe5\036\uffe5\001\002\000\016" +
    "\003\uffda\015\uffda\022\uffda\023\uffda\024\070\034\uffda\001" +
    "\002\000\010\003\073\022\074\023\065\001\002\000\032" +
    "\003\uffc4\015\uffc4\022\uffc4\023\uffc4\024\uffc4\025\uffc4\026" +
    "\uffc4\027\uffc4\030\uffc4\031\uffc4\032\uffc4\034\uffc4\001\002" +
    "\000\032\003\uffc6\015\uffc6\022\uffc6\023\uffc6\024\uffc6\025" +
    "\uffc6\026\uffc6\027\uffc6\030\uffc6\031\uffc6\032\uffc6\034\uffc6" +
    "\001\002\000\032\003\uffcb\015\uffcb\022\uffcb\023\uffcb\024" +
    "\uffcb\025\uffcb\026\uffcb\027\uffcb\030\uffcb\031\uffcb\032\uffcb" +
    "\034\uffcb\001\002\000\032\003\uffc5\015\uffc5\022\uffc5\023" +
    "\uffc5\024\uffc5\025\uffc5\026\uffc5\027\uffc5\030\uffc5\031\uffc5" +
    "\032\uffc5\034\uffc5\001\002\000\020\003\062\033\042\035" +
    "\047\036\044\037\036\040\037\041\041\001\002\000\032" +
    "\003\uffd4\015\uffd4\022\uffd4\023\uffd4\024\uffd4\025\052\026" +
    "\054\027\051\030\056\031\053\032\055\034\uffd4\001\002" +
    "\000\032\003\uffcc\015\uffcc\022\uffcc\023\uffcc\024\uffcc\025" +
    "\uffcc\026\uffcc\027\uffcc\030\uffcc\031\uffcc\032\uffcc\034\uffcc" +
    "\001\002\000\010\003\uffdc\013\uffdc\021\uffdc\001\002\000" +
    "\016\003\uffd7\015\uffd7\022\uffd7\023\uffd7\024\uffd7\034\uffd7" +
    "\001\002\000\032\003\uffc7\015\uffc7\022\uffc7\023\uffc7\024" +
    "\uffc7\025\uffc7\026\uffc7\027\uffc7\030\uffc7\031\uffc7\032\uffc7" +
    "\034\uffc7\001\002\000\020\003\060\033\042\035\047\036" +
    "\044\037\036\040\037\041\041\001\002\000\020\003\uffd0" +
    "\033\uffd0\035\uffd0\036\uffd0\037\uffd0\040\uffd0\041\uffd0\001" +
    "\002\000\020\003\uffd2\033\uffd2\035\uffd2\036\uffd2\037\uffd2" +
    "\040\uffd2\041\uffd2\001\002\000\020\003\uffce\033\uffce\035" +
    "\uffce\036\uffce\037\uffce\040\uffce\041\uffce\001\002\000\020" +
    "\003\uffd1\033\uffd1\035\uffd1\036\uffd1\037\uffd1\040\uffd1\041" +
    "\uffd1\001\002\000\020\003\uffcd\033\uffcd\035\uffcd\036\uffcd" +
    "\037\uffcd\040\uffcd\041\uffcd\001\002\000\020\003\uffcf\033" +
    "\uffcf\035\uffcf\036\uffcf\037\uffcf\040\uffcf\041\uffcf\001\002" +
    "\000\016\003\uffd5\015\uffd5\022\uffd5\023\uffd5\024\uffd5\034" +
    "\uffd5\001\002\000\016\003\uffd3\015\uffd3\022\uffd3\023\uffd3" +
    "\024\uffd3\034\uffd3\001\002\000\010\003\064\023\065\034" +
    "\063\001\002\000\032\003\uffc8\015\uffc8\022\uffc8\023\uffc8" +
    "\024\uffc8\025\uffc8\026\uffc8\027\uffc8\030\uffc8\031\uffc8\032" +
    "\uffc8\034\uffc8\001\002\000\032\003\uffca\015\uffca\022\uffca" +
    "\023\uffca\024\uffca\025\uffca\026\uffca\027\uffca\030\uffca\031" +
    "\uffca\032\uffca\034\uffca\001\002\000\032\003\uffc9\015\uffc9" +
    "\022\uffc9\023\uffc9\024\uffc9\025\uffc9\026\uffc9\027\uffc9\030" +
    "\uffc9\031\uffc9\032\uffc9\034\uffc9\001\002\000\020\003\067" +
    "\033\042\035\047\036\044\037\036\040\037\041\041\001" +
    "\002\000\016\003\uffdb\015\uffdb\022\uffdb\023\uffdb\024\070" +
    "\034\uffdb\001\002\000\014\003\uffd9\015\uffd9\022\uffd9\023" +
    "\uffd9\034\uffd9\001\002\000\020\003\071\033\042\035\047" +
    "\036\044\037\036\040\037\041\041\001\002\000\016\003" +
    "\uffd6\015\uffd6\022\uffd6\023\uffd6\024\uffd6\034\uffd6\001\002" +
    "\000\016\003\uffd8\015\uffd8\022\uffd8\023\uffd8\024\uffd8\034" +
    "\uffd8\001\002\000\010\003\uffdd\013\uffdd\021\uffdd\001\002" +
    "\000\012\003\076\012\011\020\022\036\075\001\002\000" +
    "\004\017\100\001\002\000\010\003\uffde\013\uffde\021\uffde" +
    "\001\002\000\010\003\uffdf\013\uffdf\021\uffdf\001\002\000" +
    "\020\003\102\033\042\035\047\036\044\037\036\040\037" +
    "\041\041\001\002\000\010\003\104\015\103\023\065\001" +
    "\002\000\016\003\uffe6\012\uffe6\013\uffe6\020\uffe6\021\uffe6" +
    "\036\uffe6\001\002\000\016\003\uffe9\012\uffe9\013\uffe9\020" +
    "\uffe9\021\uffe9\036\uffe9\001\002\000\016\003\uffe7\012\uffe7" +
    "\013\uffe7\020\uffe7\021\uffe7\036\uffe7\001\002\000\020\003" +
    "\ufffb\005\ufffb\012\ufffb\013\ufffb\020\ufffb\021\ufffb\036\ufffb" +
    "\001\002\000\014\003\uffeb\012\uffeb\013\uffeb\020\uffeb\036" +
    "\uffeb\001\002\000\020\003\ufffc\005\ufffc\012\ufffc\013\ufffc" +
    "\020\ufffc\021\ufffc\036\ufffc\001\002\000\006\003\124\036" +
    "\123\001\002\000\016\003\ufff1\012\ufff5\014\ufff1\016\ufff1" +
    "\020\ufff5\036\ufff5\001\002\000\014\003\114\006\113\007" +
    "\117\010\116\011\120\001\002\000\006\003\ufff0\015\ufff0" +
    "\001\002\000\010\012\ufff6\020\ufff6\036\ufff6\001\002\000" +
    "\006\003\122\015\121\001\002\000\006\003\uffee\015\uffee" +
    "\001\002\000\006\003\uffed\015\uffed\001\002\000\006\003" +
    "\uffef\015\uffef\001\002\000\010\012\ufff8\020\ufff8\036\ufff8" +
    "\001\002\000\010\012\ufff7\020\ufff7\036\ufff7\001\002\000" +
    "\010\003\ufff4\014\ufff4\016\ufff4\001\002\000\010\003\ufff2" +
    "\014\ufff2\016\ufff2\001\002\000\004\002\uffff\001\002\000" +
    "\004\002\000\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\125\000\004\003\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\004\007\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\005\011\001\001\000\016\004" +
    "\013\006\016\007\014\010\017\011\015\022\012\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\004\013\010" +
    "\105\011\015\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\012\027\013\024\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\016\034\017\033\020" +
    "\045\021\042\023\037\001\001\000\004\013\030\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\016" +
    "\060\017\033\020\045\021\042\023\037\001\001\000\004" +
    "\014\047\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\021\056\023\037" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\017\065\020\045\021\042\023\037\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\020\071\021\042\023\037" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\004\013\010\076\011\015\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\016" +
    "\100\017\033\020\045\021\042\023\037\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\015\114\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$MPParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$MPParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$MPParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

	symbolTable = new SymbolTable();

    }



	public int errNo = 0;
	public int warnNo = 0;
	public int scope = 0;

	SymbolTable symbolTable;

	public static void main( String[] args )
	{
		try
		{
			FileReader file = new FileReader( args[0] );
			Scanner scanner = new MPLexer( file );
			MPParser parser = new MPParser( scanner );
			parser.parse();
			parser.checkWarnings();
			System.out.println( "Analiza zavrsena." );
			if ( parser.errNo == 0 )
				System.out.println( "U kodu nema gresaka." );
			else
				System.out.println( "Broj gresaka: " + parser.errNo );
			if( parser.warnNo == 0 )
				System.out.println( "U kodu nema upozorenja." );
			else
				System.out.println( "Broj upozorenja: " + parser.warnNo );
		}
		catch( Exception e )
		{
			System.out.println(e);
		}
	}
	
	public void checkWarnings()
	{
		SymbolNode current = symbolTable.getVariables();
		while(current != null)
		{
			Variable var = (Variable)current;
			if(var.last_def == -1 && var.last_use == -1)
			{
				System.out.println("Upozorenje: Promenljiva "
					+ var.name +
					" je deklarisana, ali se ne koristi.");
				warnNo++;
			}
			else if(var.last_def > var.last_use)
			{
				System.out.println("Upozorenje: Vrednost dodeljena promenljivoj "
					+ var.name + " u liniji " + var.last_def +
					" se nigde ne koristi.");
				warnNo++;
			}
			current = current.next;
		}
	}
	
	public void syntax_error(Symbol cur_token)
	{
		
	}

	public void report_error(String message, Object info)
	{
		System.out.print( message );
	}

	public int getLine()
	{
		return (( MPLexer) getScanner()).getLine();
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$MPParser$actions {
  private final MPParser parser;

  /** Constructor */
  CUP$MPParser$actions(MPParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$MPParser$do_action(
    int                        CUP$MPParser$act_num,
    java_cup.runtime.lr_parser CUP$MPParser$parser,
    java.util.Stack            CUP$MPParser$stack,
    int                        CUP$MPParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$MPParser$result;

      /* select the action based on the action number */
      switch (CUP$MPParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Konstanta ::= REALCONST 
            {
              Constant RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right;
		Double c = (Double)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).value;
		
	RESULT = new Constant(parser.symbolTable.getType( "real" ),c );

              CUP$MPParser$result = new java_cup.runtime.Symbol(17/*Konstanta*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Konstanta ::= BOOLCONST 
            {
              Constant RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right;
		Boolean c = (Boolean)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).value;
		
	RESULT = new Constant(parser.symbolTable.getType( "boolean" ),c );

              CUP$MPParser$result = new java_cup.runtime.Symbol(17/*Konstanta*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Konstanta ::= CHARCONST 
            {
              Constant RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right;
		Character c = (Character)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).value;
		
	RESULT = new Constant(parser.symbolTable.getType( "char" ),c );

              CUP$MPParser$result = new java_cup.runtime.Symbol(17/*Konstanta*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Konstanta ::= INTCONST 
            {
              Constant RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right;
		Integer c = (Integer)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).value;
		
	RESULT = new Constant(parser.symbolTable.getType( "integer" ),c);

              CUP$MPParser$result = new java_cup.runtime.Symbol(17/*Konstanta*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Term ::= LEFTPAR error 
            {
              Type RESULT = null;
		
     System.out.println( "Nedostaje Expression");
    parser.errNo++;

              CUP$MPParser$result = new java_cup.runtime.Symbol(15/*Term*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Term ::= LEFTPAR Expression error 
            {
              Type RESULT = null;
		
     System.out.println( "Nedostaje )");
    parser.errNo++;

              CUP$MPParser$result = new java_cup.runtime.Symbol(15/*Term*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Term ::= LEFTPAR Expression RIGHTPAR 
            {
              Type RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).right;
		Type i = (Type)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).value;
		
	RESULT = i;

              CUP$MPParser$result = new java_cup.runtime.Symbol(15/*Term*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Term ::= Konstanta 
            {
              Type RESULT = null;
		int kleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right;
		Constant k = (Constant)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).value;
		
	RESULT = k.type;

              CUP$MPParser$result = new java_cup.runtime.Symbol(15/*Term*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Term ::= ID 
            {
              Type RESULT = null;
		int imeleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left;
		int imeright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right;
		String ime = (String)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).value;
		
	Variable var = parser.symbolTable.getVar( ime,parser.scope);
    if ( var == null )
    {
    	System.out.println( "Greska u liniji " + parser.getLine() +  ": promenljiva " + ime + " nije deklarisana.");
    	RESULT = parser.symbolTable.getType( "unknown" );
        parser.errNo++;
    }
    else 
    {
    	RESULT = var.type;
        if ( var.last_def == -1 )
        {
        	System.out.println( "Greska u liniji " + parser.getLine() + ": promenljiva " + ime + " nije inicijalizovana.");
            parser.errNo++;
        }
     	var.last_use = parser.getLine();
	}

              CUP$MPParser$result = new java_cup.runtime.Symbol(15/*Term*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // RelOp ::= GE 
            {
              Object RESULT = null;
		
    System.out.println("Smena 32");

              CUP$MPParser$result = new java_cup.runtime.Symbol(10/*RelOp*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // RelOp ::= GT 
            {
              Object RESULT = null;
		
    System.out.println("Smena 31");

              CUP$MPParser$result = new java_cup.runtime.Symbol(10/*RelOp*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // RelOp ::= NE 
            {
              Object RESULT = null;
		
    System.out.println("Smena 30");

              CUP$MPParser$result = new java_cup.runtime.Symbol(10/*RelOp*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // RelOp ::= EQ 
            {
              Object RESULT = null;
		
    System.out.println("Smena 29");

              CUP$MPParser$result = new java_cup.runtime.Symbol(10/*RelOp*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // RelOp ::= LE 
            {
              Object RESULT = null;
		
    System.out.println("Smena 28");

              CUP$MPParser$result = new java_cup.runtime.Symbol(10/*RelOp*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // RelOp ::= LT 
            {
              Object RESULT = null;
		
    System.out.println("Smena 27");

              CUP$MPParser$result = new java_cup.runtime.Symbol(10/*RelOp*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // RelExpression ::= Term RelOp error 
            {
              Type RESULT = null;
		
   System.out.println( "Nedostaje term");
    parser.errNo++;

              CUP$MPParser$result = new java_cup.runtime.Symbol(14/*RelExpression*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // RelExpression ::= Term 
            {
              Type RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right;
		Type i = (Type)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).value;
		
    RESULT = i;

              CUP$MPParser$result = new java_cup.runtime.Symbol(14/*RelExpression*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // RelExpression ::= Term RelOp Term 
            {
              Type RESULT = null;
		int r1left = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).right;
		Type r1 = (Type)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right;
		Type r2 = (Type)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).value;
		
    System.out.println("Smena 25");
	if(r1.tkind == Type.BOOLEAN || r2.tkind == Type.BOOLEAN)
	{
		System.out.println("Greska u liniji "+parser.getLine()+": "+"Operandi mogu biti samo numerickog tipa");
		parser.errNo++;
	}
	RESULT = parser.symbolTable.getType("boolean"); 

              CUP$MPParser$result = new java_cup.runtime.Symbol(14/*RelExpression*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // AndExpression ::= AndExpression AND error 
            {
              Type RESULT = null;
		
   System.out.println( "Nedostaje RelExpression");
    parser.errNo++;

              CUP$MPParser$result = new java_cup.runtime.Symbol(13/*AndExpression*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // AndExpression ::= RelExpression 
            {
              Type RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right;
		Type e = (Type)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).value;
		
    System.out.println("Smena 24");
	RESULT=e.type;

              CUP$MPParser$result = new java_cup.runtime.Symbol(13/*AndExpression*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // AndExpression ::= AndExpression AND RelExpression 
            {
              Type RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).right;
		Type e1 = (Type)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right;
		Type e2 = (Type)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).value;
		
    System.out.println("Smena 23");
	if(e1.tkind != Type.BOOLEAN || e2.tkind != Type.BOOLEAN)
	{
		System.out.println("Greska u liniji "+parser.getLine()+": "+"Operandi u logickom izrazu mogu biti samo tipa boolean.");
		parser.errNo++;
	}
	RESULT = parser.symbolTable.getType("boolean"); 

              CUP$MPParser$result = new java_cup.runtime.Symbol(13/*AndExpression*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Expression ::= Expression OR error 
            {
              Type RESULT = null;
		
   System.out.println( "Nedostaje AndExpression");
    parser.errNo++;

              CUP$MPParser$result = new java_cup.runtime.Symbol(12/*Expression*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Expression ::= AndExpression 
            {
              Type RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right;
		Type e = (Type)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).value;
		
    System.out.println("Smena 22");
	RESULT=e.type;

              CUP$MPParser$result = new java_cup.runtime.Symbol(12/*Expression*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Expression ::= Expression OR AndExpression 
            {
              Type RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).right;
		Type e1 = (Type)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right;
		Type e2 = (Type)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).value;
		
    System.out.println("Smena 21");
	if(e1.tkind != Type.BOOLEAN || e2.tkind != Type.BOOLEAN)
	{
		System.out.println("Greska u liniji "+parser.getLine()+": "+"Operandi u logickom izrazu mogu biti samo tipa boolean.");
		parser.errNo++;
	}
	RESULT = parser.symbolTable.getType("boolean");    

              CUP$MPParser$result = new java_cup.runtime.Symbol(12/*Expression*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Case ::= CASE error 
            {
              Object RESULT = null;
		
   System.out.println( "Nedostaje expression");
    parser.errNo++;

              CUP$MPParser$result = new java_cup.runtime.Symbol(9/*Case*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Case ::= CASE Expression error 
            {
              Object RESULT = null;
		
   System.out.println( "Nedostaje '=>'");
    parser.errNo++;

              CUP$MPParser$result = new java_cup.runtime.Symbol(9/*Case*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Case ::= CASE Expression ARROW error 
            {
              Object RESULT = null;
		
   System.out.println( "Nedostaje Statement");
    parser.errNo++;

              CUP$MPParser$result = new java_cup.runtime.Symbol(9/*Case*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Case ::= CASE Expression ARROW Statement 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).right;
		Type e = (Type)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).value;
		
    System.out.println("Smena 20");
	System.out.println("ekind =" +e.kind + " type.bool= " +Type.BOOLEAN +e.name);
	if(e.name != "boolean")
	{
		System.out.println("Greska u liniji " +parser.getLine() + ": " +"Izraz mora biti tipa boolean a trenutni izraz je tipa: " + e.name);
		parser.errNo++;
	}
	RESULT = parser.symbolTable.getType("boolean");

              CUP$MPParser$result = new java_cup.runtime.Symbol(9/*Case*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // CaseList ::= Case 
            {
              Object RESULT = null;
		
    System.out.println("Smena 19");

              CUP$MPParser$result = new java_cup.runtime.Symbol(8/*CaseList*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // CaseList ::= CaseList Case 
            {
              Object RESULT = null;
		
    System.out.println("Smena 18");

              CUP$MPParser$result = new java_cup.runtime.Symbol(8/*CaseList*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // SelectStatement ::= SELECT error 
            {
              Object RESULT = null;
		
   System.out.println( "Nedostaje kljucna rec begin");
    parser.errNo++;

              CUP$MPParser$result = new java_cup.runtime.Symbol(7/*SelectStatement*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // SelectStatement ::= SELECT BEGIN error 
            {
              Object RESULT = null;
		
   System.out.println( "Nedostaje CaseList");
    parser.errNo++;

              CUP$MPParser$result = new java_cup.runtime.Symbol(7/*SelectStatement*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // SelectStatement ::= SELECT BEGIN CaseList error 
            {
              Object RESULT = null;
		
   System.out.println( "Nedostaje kljucna rec end");
    parser.errNo++;

              CUP$MPParser$result = new java_cup.runtime.Symbol(7/*SelectStatement*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // SelectStatement ::= SELECT BEGIN CaseList END 
            {
              Object RESULT = null;
		
    System.out.println("Smena 17");
	parser.scope--;

              CUP$MPParser$result = new java_cup.runtime.Symbol(7/*SelectStatement*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Statement ::= ID ASSIGN error 
            {
              Object RESULT = null;
		
   System.out.println( "Nedostaje izraz" );
    parser.errNo++;

              CUP$MPParser$result = new java_cup.runtime.Symbol(6/*Statement*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Statement ::= ID ASSIGN Expression error 
            {
              Object RESULT = null;
		
   System.out.println( "Nedostaje ';'" );
    parser.errNo++;

              CUP$MPParser$result = new java_cup.runtime.Symbol(6/*Statement*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Statement ::= Block 
            {
              Object RESULT = null;
		
    System.out.println("Smena 16");

              CUP$MPParser$result = new java_cup.runtime.Symbol(6/*Statement*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Statement ::= ID ASSIGN Expression SEMICOLON 
            {
              Object RESULT = null;
		int imeleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)).left;
		int imeright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)).right;
		String ime = (String)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).right;
		Type i = (Type)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).value;
		
    System.out.println("Smena 15");
	
	Variable var = parser.symbolTable.getVar(ime,parser.scope);
	if(var == null)
	{
		System.out.println("Greska u liniji "+parser.getLine()+ ": " +"promenljiva "+ime+" nije deklarisana.");
		parser.errNo++;
	}
	else
	{
		var.last_def = parser.getLine();
		if(var.type.tkind == 4 && var.type.tkind > i.tkind)
															//Broj u Type.java za bool je 4, sto znaci bool moze samo bool
		{	
			System.out.println("Greska u liniji "+parser.getLine()+": "+"Neslaganje tipa u naredbi dodele.");
			parser.errNo++;			
		}
		else if(var.type.tkind != i.tkind && var.type.tkind > i.tkind )
																	//Ukoliko nisu istog tipa i levi je veci tip, vrsiti konverziju desnog tj. nizeg u visi
		{
			System.out.println("Izvrsena je konverzacija nizeg u visi tip");
			//var.type.tkind=	i.tkind;
		} 
	}

              CUP$MPParser$result = new java_cup.runtime.Symbol(6/*Statement*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Statement ::= SelectStatement 
            {
              Object RESULT = null;
		
    System.out.println("Smena 14");
	

              CUP$MPParser$result = new java_cup.runtime.Symbol(6/*Statement*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // StatementList ::= StatementList Statement 
            {
              Object RESULT = null;
		
    System.out.println("Smena 13");

              CUP$MPParser$result = new java_cup.runtime.Symbol(5/*StatementList*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // StatementList ::= Statement 
            {
              Object RESULT = null;
		
    System.out.println("Smena 12");

              CUP$MPParser$result = new java_cup.runtime.Symbol(5/*StatementList*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Tip ::= BOOLEAN 
            {
              Type RESULT = null;
		
    System.out.println("Smena 11");
	RESULT = parser.symbolTable.getType("boolean");

              CUP$MPParser$result = new java_cup.runtime.Symbol(11/*Tip*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Tip ::= REAL 
            {
              Type RESULT = null;
		
    System.out.println("Smena 10");
	RESULT = parser.symbolTable.getType("real");

              CUP$MPParser$result = new java_cup.runtime.Symbol(11/*Tip*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Tip ::= CHAR 
            {
              Type RESULT = null;
		
    System.out.println("Smena 9");
	RESULT = parser.symbolTable.getType("char");

              CUP$MPParser$result = new java_cup.runtime.Symbol(11/*Tip*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Tip ::= INTEGER 
            {
              Type RESULT = null;
		
    System.out.println("Smena 8");
	RESULT = parser.symbolTable.getType("integer");

              CUP$MPParser$result = new java_cup.runtime.Symbol(11/*Tip*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // NameList ::= NameList error 
            {
              ArrayList RESULT = null;
		
	System.out.println( "Nedostaje ','" );
    parser.errNo++;

              CUP$MPParser$result = new java_cup.runtime.Symbol(16/*NameList*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // NameList ::= NameList COMMA error 
            {
              ArrayList RESULT = null;
		
	System.out.println( "Nedostaje identifikator" );
    parser.errNo++;

              CUP$MPParser$result = new java_cup.runtime.Symbol(16/*NameList*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // NameList ::= ID 
            {
              ArrayList RESULT = null;
		int imeleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left;
		int imeright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right;
		String ime = (String)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).value;
		
    System.out.println("Smena 7");
	RESULT = new ArrayList();
	RESULT.add( ime );

              CUP$MPParser$result = new java_cup.runtime.Symbol(16/*NameList*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // NameList ::= NameList COMMA ID 
            {
              ArrayList RESULT = null;
		int nizleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left;
		int nizright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).right;
		ArrayList niz = (ArrayList)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).value;
		int imeleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left;
		int imeright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right;
		String ime = (String)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).value;
		
    System.out.println("Smena 6");
	RESULT = niz;
	RESULT.add( ime );

              CUP$MPParser$result = new java_cup.runtime.Symbol(16/*NameList*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Declaration ::= NameList error 
            {
              Object RESULT = null;
		
	System.out.println( "Nedostaje ':'" );
    parser.errNo++;

              CUP$MPParser$result = new java_cup.runtime.Symbol(4/*Declaration*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Declaration ::= NameList COLON error 
            {
              Object RESULT = null;
		
	System.out.println( "Nedostaje Type Promenljive" );
    parser.errNo++;

              CUP$MPParser$result = new java_cup.runtime.Symbol(4/*Declaration*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Declaration ::= NameList COLON Tip error 
            {
              Object RESULT = null;
		int nizleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)).left;
		int nizright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)).right;
		ArrayList niz = (ArrayList)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).value;
		
	System.out.println( "Nedostaje ';'" );
	for(int i = 0; i < niz.size(); i++)
    {
    	String ime = (String) niz.get(i);
        if(!parser.symbolTable.addVar(ime, t,parser.scope))
		{
        	System.out.println("Greska u liniji "+parser.getLine()+": "+"Promenljiva "+ime+" je vec deklarisana.");
            parser.errNo++;
		}
	}
    parser.errNo++;

              CUP$MPParser$result = new java_cup.runtime.Symbol(4/*Declaration*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Declaration ::= NameList COLON Tip SEMICOLON 
            {
              Object RESULT = null;
		int nizleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)).left;
		int nizright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)).right;
		ArrayList niz = (ArrayList)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).value;
		
    System.out.println("Smena 5");
	for(int i = 0; i < niz.size(); i++)
    {
    	String ime = (String) niz.get(i);
        if(!parser.symbolTable.addVar(ime, t,parser.scope))
		{
        	System.out.println("Greska u liniji "+parser.getLine()+": "+"Promenljiva "+ime+" je vec deklarisana.");
            parser.errNo++;
		}
	}


              CUP$MPParser$result = new java_cup.runtime.Symbol(4/*Declaration*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Variables ::= 
            {
              Object RESULT = null;
		
	System.out.println("Smena 4");

              CUP$MPParser$result = new java_cup.runtime.Symbol(3/*Variables*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Variables ::= Variables Declaration 
            {
              Object RESULT = null;
		
    System.out.println("Smena 3");

              CUP$MPParser$result = new java_cup.runtime.Symbol(3/*Variables*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Block ::= BEGIN Variables StatementList error 
            {
              Object RESULT = null;
		
	System.out.println( "Nedostaje kljucna rec end" );
    parser.errNo++;

              CUP$MPParser$result = new java_cup.runtime.Symbol(2/*Block*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Block ::= BEGIN Variables StatementList END 
            {
              Object RESULT = null;
		
    System.out.println("Smena 2");
parser.scope++;
	

              CUP$MPParser$result = new java_cup.runtime.Symbol(2/*Block*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Program ::= error 
            {
              Object RESULT = null;
		
	System.out.println( "Nedostaje kljucna rec program" );
    parser.errNo++;

              CUP$MPParser$result = new java_cup.runtime.Symbol(1/*Program*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Program ::= PROGRAM error 
            {
              Object RESULT = null;
		
	System.out.println( "Nedostaje blok programa" );
    parser.errNo++;

              CUP$MPParser$result = new java_cup.runtime.Symbol(1/*Program*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Program ::= PROGRAM Block error 
            {
              Object RESULT = null;
		
	System.out.println( "Nedostaje '.' na kraju programa" );
    parser.errNo++;

              CUP$MPParser$result = new java_cup.runtime.Symbol(1/*Program*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Program ::= PROGRAM Block DOT 
            {
              Object RESULT = null;
		
    System.out.println("Smena 1");

              CUP$MPParser$result = new java_cup.runtime.Symbol(1/*Program*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Program EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).value;
		RESULT = start_val;
              CUP$MPParser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$MPParser$parser.done_parsing();
          return CUP$MPParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

